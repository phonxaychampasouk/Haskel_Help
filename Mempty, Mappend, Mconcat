Prelude> :t Nothing
Nothing :: Maybe a
Prelude> :t Just 7
Just 7 :: Num a => Maybe a
Prelude> Just "Cat"
Just "Cat"
Prelude> mappend (Just "Cat") (Just "Dog")
Just "CatDog"
Prelude> :t mappend                                 //Mappend
mappend :: Monoid a => a -> a -> a
Prelude> :i mappend
class Semigroup a => Monoid a where
  ...
  mappend :: a -> a -> a
  ...
  	-- Defined in ‘GHC.Base’
Prelude> :iMonoid
unknown command ':iMonoid'
use :? for help.
Prelude> :i Monoid
class Semigroup a => Monoid a where
  mempty :: a                                         //Explains memty, mappend, mconcat
  mappend :: a -> a -> a
  mconcat :: [a] -> a
  {-# MINIMAL mempty #-}
  	-- Defined in ‘GHC.Base’
instance Monoid [a] -- Defined in ‘GHC.Base’
instance Monoid Ordering -- Defined in ‘GHC.Base’
instance Semigroup a => Monoid (Maybe a) -- Defined in ‘GHC.Base’
instance Monoid a => Monoid (IO a) -- Defined in ‘GHC.Base’
instance Monoid b => Monoid (a -> b) -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c, Monoid d, Monoid e) =>
         Monoid (a, b, c, d, e)
  -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c, Monoid d) =>
         Monoid (a, b, c, d)
  -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b, Monoid c) => Monoid (a, b, c)
  -- Defined in ‘GHC.Base’
instance (Monoid a, Monoid b) => Monoid (a, b)
  -- Defined in ‘GHC.Base’
instance Monoid () -- Defined in ‘GHC.Base’
Prelude> mappend Nothing (Just "Dog")
Just "Dog"
Prelude> mappend (Just "Cat") Nothing
Just "Cat"
Prelude> mappend Nothing Nothing
Nothing
Prelude> :t mconcat
mconcat :: Monoid a => [a] -> a
Prelude> 
